import telebot
import os
import google.generativeai as genai
from flask import Flask, request
import time
import threading

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("TELEGRAM_TOKEN –∏ GEMINI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞ –∏ API Gemini
bot = telebot.TeleBot(TELEGRAM_TOKEN)
genai.configure(api_key=GEMINI_API_KEY)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
model = genai.GenerativeModel('gemini-2.5-flash')

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
# –≠—Ç–æ –Ω–∞—à–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞
processing_requests = set()


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---

def edit_placeholder_message(message, stop_event):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "–î—É–º–∞—é...".
    –û–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    animation_chars = ['‚è≥', 'üß†', 'üí°', '‚úçÔ∏è']
    start_time = time.time()
    i = 0
    while not stop_event.is_set():
        elapsed_time = int(time.time() - start_time)
        char = animation_chars[i % len(animation_chars)]
        try:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text=f"{char} –î—É–º–∞—é... ({elapsed_time}—Å)"
            )
            i += 1
            time.sleep(1.2) # –û–±–Ω–æ–≤–ª—è–µ–º —á—É—Ç—å —Ä–µ–∂–µ —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API Telegram
        except telebot.apihelper.ApiTelegramException as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—É–∂–µ –∑–∞–º–µ–Ω–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–º) –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            if e.result.status_code == 400:
                break
        except Exception:
            break # –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini 1.5 Flash. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in processing_requests:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    processing_requests.add(user_id)
    placeholder = bot.reply_to(message, "‚è≥ –ü–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    stop_event = threading.Event()
    animation_thread = threading.Thread(target=edit_placeholder_message, args=(placeholder, stop_event))
    animation_thread.start()

    try:
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini
        response = model.generate_content(message.text)
        
        # 5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Å—Ç–∞–≤–ª—è—è –æ—Ç–≤–µ—Ç
        stop_event.set()
        animation_thread.join() # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        bot.edit_message_text(
            chat_id=placeholder.chat.id,
            message_id=placeholder.message_id,
            text=response.text
        )

    except Exception as e:
        # 6. –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        stop_event.set()
        animation_thread.join()
        print(f"!!! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ Vercel
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        error_message = str(e)
        if "response.prompt_feedback" in error_message:
            error_details = "–ú–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        else:
            error_details = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`{error_message}`"

        bot.edit_message_text(
            chat_id=placeholder.chat.id,
            message_id=placeholder.message_id,
            text=f"üò• –û–π, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.\n\n{error_details}",
            parse_mode='Markdown'
        )
    finally:
        # 7. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞) —É–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        processing_requests.remove(user_id)


# --- –°–ï–ö–¶–ò–Ø –î–õ–Ø VERSEL ---
app = Flask(__name__)

@app.route('/' + TELEGRAM_TOKEN, methods=['POST'])
def getMessage():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f'https://{os.environ.get("VERCEL_URL")}/{TELEGRAM_TOKEN}')
    return "–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 200