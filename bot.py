import telebot
import os
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions
from flask import Flask, request

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

# –¢–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–∞–π–º-–∞—É—Ç–∞ Vercel (10-15—Å)
GEMINI_REQUEST_TIMEOUT = 9 

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("TELEGRAM_TOKEN –∏ GEMINI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
genai.configure(api_key=GEMINI_API_KEY)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –º–æ—â–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –≤ –ø—É–±–ª–∏—á–Ω–æ–º API
model = genai.GenerativeModel('gemini-1.5-pro-latest')


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini 1.5 Pro. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º-–∞—É—Ç–æ–º."""
    
    placeholder = None
    try:
        # 1. –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É.
        placeholder = bot.reply_to(message, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        # 2. –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–∞–π–º-–∞—É—Ç–æ–º.
        # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–≤–µ—á–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è".
        response = model.generate_content(
            message.text,
            request_options={'timeout': GEMINI_REQUEST_TIMEOUT}
        )

        # 3. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É.
        bot.edit_message_text(
            chat_id=placeholder.chat.id,
            message_id=placeholder.message_id,
            text=response.text
        )

    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–ª—á–∞–ª.
    except google_exceptions.DeadlineExceeded:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –µ—Å–ª–∏ –Ω–∞—à —Ç–∞–π–º-–∞—É—Ç (9—Å) —Å—Ä–∞–±–æ—Ç–∞–ª.
        print(f"[ERROR] –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        bot.edit_message_text(
            chat_id=placeholder.chat.id,
            message_id=placeholder.message_id,
            text="üò• **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤–æ–≤—Ä–µ–º—è.**\n\n–ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞–ª–∞ –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        )

    except google_exceptions.GoogleAPICallError as e:
        # –û—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–∞–º–∏–º API Google (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á, –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ —Ç.–¥.)
        print(f"[ERROR] –û—à–∏–±–∫–∞ API Google: {e}")
        bot.edit_message_text(
            chat_id=placeholder.chat.id,
            message_id=placeholder.message_id,
            text=f"üò• **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ API Google.**\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`{e}`"
        )
    
    except Exception as e:
        # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ (–ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é, –æ—à–∏–±–∫–∏ –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ –∏ —Ç.–¥.)
        print(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: –¢–∏–ø: {type(e).__name__}, –î–µ—Ç–∞–ª–∏: {e}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ placeholder, –ø—Ä–µ–∂–¥–µ —á–µ–º –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if placeholder:
            bot.edit_message_text(
                chat_id=placeholder.chat.id,
                message_id=placeholder.message_id,
                text=f"üò• **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ —Å–ª–æ–º–∞–ª–æ—Å—å.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`{e}`"
            )


# --- –°–ï–ö–¶–ò–Ø –î–õ–Ø VERSEL ---
app = Flask(__name__)

@app.route('/' + TELEGRAM_TOKEN, methods=['POST'])
def getMessage():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f'https://{os.environ.get("VERCEL_URL")}/{TELEGRAM_TOKEN}')
    return "–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 200